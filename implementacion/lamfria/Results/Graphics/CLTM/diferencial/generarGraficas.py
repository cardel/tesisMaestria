#!/usr/bin/python
# -*- coding: utf-8 -*- 
import numpy
numpy.set_printoptions(threshold=numpy.nan)
import matplotlib.pyplot as plt
import time
import math
from matplotlib.font_manager import FontProperties
minq = -10
maxq = 10
IndexZero = 10
symbols = ['r-p','b-s','g-^','y-o','m->','c-<','g--','k-.','c--']
nan=float('nan')
percentNodes=[ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]


DqRandom=numpy.array([[ 1.64439379, 1.63950084, 1.63389707, 1.62742413, 1.61987572, 1.61097709,
   1.60035058, 1.58745521, 1.57147645, 1.55112098, 1.52428121, 1.48791486,
   1.43965638, 1.37937233, 1.31326729, 1.25881057, 1.21889399, 1.18921935,
   1.16635665, 1.1481273 , 1.13315263],
 [ 1.84156895, 1.83295773, 1.8224871 , 1.80951915, 1.79312588, 1.77196652,
   1.74418606, 1.70754762, 1.66042481, 1.60432747, 1.544678  , 1.48418868,
   1.42032412, 1.35141151, 1.28204521, 1.22697241, 1.18749925, 1.15868444,
   1.13681221, 1.11958583, 1.10557977],
 [ 1.53979737, 1.52941707, 1.51704443, 1.50213436, 1.48395419, 1.46153531,
   1.43368031, 1.39914874, 1.35715603, 1.30824071, 1.25492639, 1.20019778,
   1.14608649, 1.0941374 , 1.0464786 , 1.01008349, 0.98422691, 0.96533972,
   0.95095419, 0.93957563, 0.93028036],
 [ 1.73154058, 1.72362141, 1.71370868, 1.70117547, 1.68517037, 1.66454008,
   1.63775579, 1.60293231, 1.55816329, 1.50238314, 1.43606593, 1.36068175,
   1.28000022, 1.196753  , 1.11747563, 1.0583708 , 1.01716356, 0.98740785,
   0.96494229, 0.94732181, 0.9330624 ],
 [ 1.5435504 , 1.54354764, 1.54335783, 1.54288747, 1.54198047, 1.54036101,
   1.53750684, 1.53233711, 1.52241788, 1.5022802 , 1.46172531, 1.38951399,
   1.28842529, 1.17442023, 1.07350228, 1.0040993 , 0.9573771 , 0.92457135,
   0.90052059, 0.8822017 , 0.86778305],
 [ 1.35748289, 1.36140251, 1.36588769, 1.37114528, 1.37750923, 1.38541444,
   1.39501474, 1.40477037, 1.4088152 , 1.39575977, 1.35122485, 1.2659966 ,
   1.15547952, 1.04203442, 0.95077874, 0.88965003, 0.84786708, 0.81809055,
   0.79609115, 0.77929867, 0.76610358],
 [ 1.36940048, 1.36728612, 1.36474734, 1.36174048, 1.35821746, 1.35406156,
   1.34881098, 1.34077812, 1.32516908, 1.29200131, 1.22737829, 1.1288616 ,
   1.01663926, 0.89729202, 0.80509324, 0.74646496, 0.70756083, 0.68014864,
   0.65990279, 0.6443813 , 0.63211891],
 [ 1.32912392, 1.32674767, 1.32383446, 1.32023209, 1.31569473, 1.30975588,
   1.30141135, 1.2884373 , 1.26632139, 1.22771905, 1.16567013, 1.08339983,
   0.99157942, 0.89252894, 0.80978562, 0.75323313, 0.7142803 , 0.68606679,
   0.66474716, 0.64808811, 0.63470907],
 [ 1.33835297, 1.33635855, 1.33368953, 1.33023164, 1.32588794, 1.32059664,
   1.31433185, 1.30702129, 1.29819383, 1.28595406, 1.26509348, 1.22662971,
   1.16534722, 1.09334338, 1.03060194, 0.9840973 , 0.95102624, 0.92721154,
   0.90958993, 0.8961896 , 0.88575359],
 [ 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 ,
   0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 ,
   0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 , 0.4150375 ,
   0.4150375 , 0.4150375 , 0.4150375 ]]
)
GCRandom=numpy.array([ 1.        , 0.8909224 , 0.72767204, 0.23499268, 0.07869693, 0.04502196,
  0.02525622, 0.01756955, 0.00402635, 0.00146413]
)
APLRandom=numpy.array([ 1.        , 1.07368971, 1.62998348, 0.55458479, 0.32737553, 0.21670796,
  0.16410451, 0.11624714, 0.03827658, 0.01366649]

)
DqDegree=numpy.array([[ 1.64449749, 1.63961649, 1.63402674, 1.62757034, 1.62004177, 1.61116779,
   1.60057356, 1.58772308, 1.57181041, 1.55155624, 1.52487318, 1.48873439,
   1.44076775, 1.38103523, 1.31581348, 1.26181149, 1.2220153 , 1.19235978,
   1.16949887, 1.15128043, 1.13633231],
 [ 1.2892028 , 1.28593354, 1.28194322, 1.27697063, 1.27062099, 1.26228193,
   1.25098636, 1.23521023, 1.21266787, 1.18047056, 1.13668175, 1.08398104,
   1.03128032, 0.98749152, 0.9552942 , 0.93275185, 0.91697572, 0.90568015,
   0.89734109, 0.89099145, 0.88601885],
 [ 1.28193052, 1.27793475, 1.27305769, 1.26698008, 1.25921941, 1.24902722,
   1.23522153, 1.21593959, 1.18838782, 1.14903555, 1.0955159 , 1.03110391,
   0.96669193, 0.91317228, 0.87382   , 0.84626823, 0.8269863 , 0.8131806 ,
   0.80298842, 0.79522775, 0.78915013],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan]]
)
GCDegree=numpy.array([  1.00000000e+00,  1.83016105e-03,  1.83016105e-03,  3.66032211e-04,
   3.66032211e-04,  3.66032211e-04,  3.66032211e-04,  3.66032211e-04,
   3.66032211e-04,  3.66032211e-04]
)
APLDegree=numpy.array([ 1.        , 0.03118385, 0.02975367, 0.0174913 , 0.0174913 , 0.0174913 ,
  0.0174913 , 0.0174913 , 0.0174913 , 0.0174913 ]

)
DqCentrality=numpy.array([[ 1.64443424, 1.63954722, 1.63395049, 1.62748606, 1.61994838, 1.61106434,
   1.60045967, 1.58759996, 1.57168273, 1.55143497, 1.52477734, 1.48867692,
   1.44064587, 1.38034218, 1.31439421, 1.26015975, 1.22033686, 1.19069129,
   1.16783294, 1.14960142, 1.13462707],
 [ 1.47340587, 1.47357801, 1.47350937, 1.47305755, 1.47199327, 1.46995031,
   1.46636999, 1.46049387, 1.45152444, 1.43898569, 1.42266486, 1.40106001,
   1.36937953, 1.32046832, 1.25811724, 1.20103577, 1.15672141, 1.12331189,
   1.09779279, 1.07786045, 1.0619397 ],
 [ 1.35199897, 1.3498746 , 1.34706388, 1.34329811, 1.33818005, 1.3311175 ,
   1.32123972, 1.30734417, 1.28803566, 1.26233189, 1.23047618, 1.19317061,
   1.14887617, 1.095171  , 1.03759138, 0.98662024, 0.94600802, 0.91454859,
   0.89007178, 0.87071967, 0.85512645],
 [ 1.1757585 , 1.16923623, 1.16158516, 1.15257453, 1.14191775, 1.12924494,
   1.11405289, 1.09562791, 1.07296129, 1.04472371, 1.00937854, 0.96549399,
   0.91289405, 0.85563536, 0.80203236, 0.75780419, 0.72332187, 0.69665799,
   0.67580907, 0.65924108, 0.64585653],
 [ 1.28556666, 1.28193415, 1.27750046, 1.27197535, 1.2649202 , 1.25565458,
   1.24310394, 1.22557491, 1.20052785, 1.16475306, 1.11609883, 1.05754248,
   0.99898613, 0.9503319 , 0.9145571 , 0.88951004, 0.87198101, 0.85943038,
   0.85016476, 0.8431096 , 0.83758449],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan]]
)
GCCentrality=numpy.array([  1.00000000e+00,  1.13103953e-01,  2.52562225e-02,  6.22254758e-03,
   1.83016105e-03,  1.09809663e-03,  1.09809663e-03,  3.66032211e-04,
   3.66032211e-04,  3.66032211e-04]
)
APLCentrality=numpy.array([ 1.        , 0.36533273, 0.15594988, 0.06633908, 0.02890447, 0.02660878,
  0.02280296, 0.0174931 , 0.0174931 , 0.0174931 ]
)
DqGenetic=numpy.array([[ 1.64438717, 1.63949643, 1.63389619, 1.62742885, 1.61988938, 1.61100519,
   1.60040222, 1.5875455 , 1.57163066, 1.55138149, 1.52471653, 1.48861047,
   1.44060389, 1.3803722 , 1.31441098, 1.26013028, 1.22026813, 1.190585  ,
   1.16769081, 1.14942435, 1.13441496],
 [ 1.56950759, 1.56062379, 1.55008479, 1.53738855, 1.52181949, 1.50235092,
   1.47753512, 1.44548335, 1.40426675, 1.35329638, 1.29526051, 1.23522472,
   1.1763001 , 1.11896935, 1.06527045, 1.02304896, 0.992671  , 0.9704721 ,
   0.95363787, 0.94039993, 0.92965366],
 [ 1.5558902 , 1.5474037 , 1.53736259, 1.52531024, 1.51060573, 1.49235094,
   1.46932287, 1.4399898 , 1.40278696, 1.3568116 , 1.3026758 , 1.24273229,
   1.18074336, 1.12053712, 1.06554722, 1.02274603, 0.99182183, 0.96903607,
   0.95160739, 0.93779649, 0.92651423],
 [ 1.55781534, 1.55013025, 1.54087327, 1.52961868, 1.51578554, 1.49856054,
   1.47678068, 1.44879882, 1.41247649, 1.36561665, 1.3069685 , 1.2373704 ,
   1.1610842 , 1.08370283, 1.01198951, 0.95643081, 0.91617378, 0.88652134,
   0.86395926, 0.84625176, 0.83197983],
 [ 1.47325973, 1.47021447, 1.4662141 , 1.46088671, 1.4536973 , 1.44387528,
   1.43030941, 1.41143695, 1.38525776, 1.34958826, 1.30250392, 1.24367032,
   1.17700785, 1.10627893, 1.03795484, 0.98564281, 0.94905777, 0.92314194,
   0.90414008, 0.88971081, 0.87840816],
 [ 1.26523101, 1.264064  , 1.2624642 , 1.26013379, 1.25654636, 1.25080154,
   1.2414362 , 1.22621901, 1.20194831, 1.1642942 , 1.10862188, 1.03524582,
   0.95366154, 0.8684242 , 0.79449456, 0.74280253, 0.70793206, 0.68384957,
   0.66664938, 0.65395284, 0.64429439],
 [ 1.57469702, 1.5727466 , 1.57026664, 1.56718469, 1.56346091, 1.55912613,
   1.55431773, 1.54911267, 1.54196093, 1.52331039, 1.47042978, 1.37458099,
   1.25724075, 1.12596518, 1.02331315, 0.95711883, 0.91196293, 0.87883511,
   0.85333828, 0.83307721, 0.81658686],
 [ 1.5512171 , 1.55574109, 1.56069798, 1.56621959, 1.57254744, 1.58013997,
   1.58988998, 1.60353003, 1.62403583, 1.65361251, 1.68187032, 1.67519352,
   1.59487972, 1.45547021, 1.342521  , 1.26934729, 1.21948674, 1.18295952,
   1.15487111, 1.13259952, 1.11456401],
 [ 1.28556666, 1.28193415, 1.27750046, 1.27197535, 1.2649202 , 1.25565458,
   1.24310394, 1.22557491, 1.20052785, 1.16475306, 1.11609883, 1.05754248,
   0.99898613, 0.9503319 , 0.9145571 , 0.88951004, 0.87198101, 0.85943038,
   0.85016476, 0.8431096 , 0.83758449],
 [ 1.10853347, 1.10553791, 1.1019535 , 1.09760913, 1.09226115, 1.0855452 ,
   1.07688259, 1.06529557, 1.0490635 , 1.02522395, 0.98947246, 0.93856277,
   0.87677916, 0.81708962, 0.76916607, 0.73378657, 0.70794936, 0.68870471,
   0.67398109, 0.66242931, 0.65316909]]
)
GCGenetic=numpy.array([ 1.        , 0.80124451, 0.66654466, 0.18374817, 0.11749634, 0.04136164,
  0.01793558, 0.00988287, 0.00658858, 0.00256223]
)
APLGenetic=numpy.array([ 1.        , 1.5161538 , 1.52354397, 0.59940579, 0.57896034, 0.28588365,
  0.09546375, 0.0518797 , 0.03170123, 0.02523973]

)
DqSimulated=numpy.array([[ 1.64444318, 1.63955908, 1.63396566, 1.62750478, 1.6199706 , 1.61108946,
   1.60048604, 1.5876239 , 1.57169702, 1.55142688, 1.52472811, 1.48857058,
   1.44049318, 1.38005064, 1.31355478, 1.25889332, 1.21884097, 1.1890449 ,
   1.16606944, 1.14773519, 1.13266295],
 [ 1.70814871, 1.7048183 , 1.70080864, 1.69587445, 1.68961343, 1.68133043,
   1.6697783 , 1.65270672, 1.62624771, 1.58451823, 1.52045845, 1.42988199,
   1.3199816 , 1.20696457, 1.10669969, 1.03436433, 0.98436693, 0.94865362,
   0.92206019, 0.90150658, 0.88511782],
 [ 1.47401164, 1.47651542, 1.479569  , 1.48328845, 1.48774658, 1.49286033,
   1.49815393, 1.50233751, 1.5027173 , 1.49467373, 1.4720293 , 1.43027972,
   1.36948542, 1.28890954, 1.20126417, 1.13047443, 1.07928297, 1.04215179,
   1.01443407, 0.99309554, 0.97621061],
 [ 1.38777905, 1.38318747, 1.3776701 , 1.37093149, 1.36250113, 1.3515765 ,
   1.33676446, 1.31578299, 1.28535829, 1.24177518, 1.18288502, 1.1117379 ,
   1.03532698, 0.95521805, 0.88064869, 0.82391489, 0.78293162, 0.75266564,
   0.72954899, 0.71133052, 0.69658411],
 [ 1.19535357, 1.19877503, 1.20250831, 1.20655305, 1.21087486, 1.21534948,
   1.21962605, 1.22285182, 1.22328784, 1.21811416, 1.20386844, 1.17742326,
   1.13714653, 1.08574733, 1.03249188, 0.98630665, 0.94977477, 0.92164635,
   0.89992797, 0.88293655, 0.86943335],
 [ 1.19666575, 1.1930852 , 1.18865945, 1.18313632, 1.17616198, 1.1672268 ,
   1.15558734, 1.14018868, 1.11968795, 1.09275053, 1.0585466 , 1.01674434,
   0.96725505, 0.91280201, 0.86099434, 0.81783457, 0.78394742, 0.75756938,
   0.73680636, 0.72019021, 0.70666754],
 [ 1.20056008, 1.1968741 , 1.19235345, 1.18674117, 1.17966909, 1.17059518,
   1.15870521, 1.14277886, 1.12108597, 1.09152882, 1.05201013, 0.99944905,
   0.93000477, 0.85329841, 0.78976424, 0.74407277, 0.71126336, 0.68677347,
   0.66778502, 0.65261241, 0.64020416],
 [ 1.28556666, 1.28193415, 1.27750046, 1.27197535, 1.2649202 , 1.25565458,
   1.24310394, 1.22557491, 1.20052785, 1.16475306, 1.11609883, 1.05754248,
   0.99898613, 0.9503319 , 0.9145571 , 0.88951004, 0.87198101, 0.85943038,
   0.85016476, 0.8431096 , 0.83758449],
 [ 0.95457747, 0.95007041, 0.94460083, 0.93785153, 0.92937338, 0.91853065,
   0.90443941, 0.88593286, 0.86165417, 0.83048202, 0.79248125, 0.75      ,
   0.70751875, 0.66951798, 0.63834583, 0.61406714, 0.59556059, 0.58146935,
   0.57062662, 0.56214847, 0.55539917],
 [ 0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525,
   0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525,
   0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525, 0.38607525,
   0.38607525, 0.38607525, 0.38607525]]
)
GCSimulated=numpy.array([ 1.        , 0.19985359, 0.05600293, 0.03989751, 0.00915081, 0.00805271,
  0.00549048, 0.00183016, 0.00146413, 0.0010981 ]
)
APLSimulated=numpy.array([ 1.        , 0.48979219, 0.20978308, 0.19665453, 0.0690829 , 0.06372684,
  0.0313279 , 0.0182162 , 0.01033715, 0.01749364]
)
fileOutput = '20180505_044516floweru2v2'
timestr = 'grafica'
font = {'weight': 'normal', 'size': 8}
fig3 = plt.figure()
ax = fig3.add_subplot(111)
deltaA = numpy.array([])
deltaB = numpy.array([])
deltaC = numpy.array([])
deltaD = numpy.array([])
deltaE = numpy.array([])
deltaF = numpy.array([])
for i in range(0,9):
	if i < DqRandom.shape[0]:
		deltaA = numpy.append(deltaA, numpy.max(DqRandom[i][IndexZero:-1])-numpy.min(DqRandom[i][IndexZero:-1]))
	if i < DqDegree.shape[0]:
		deltaB = numpy.append(deltaB, numpy.max(DqDegree[i][IndexZero:-1])-numpy.min(DqDegree[i][IndexZero:-1]))
	if i < DqCentrality.shape[0]:
		deltaC = numpy.append(deltaC, numpy.max(DqCentrality[i][IndexZero:-1])-numpy.min(DqCentrality[i][IndexZero:-1]))
	if i < DqGenetic.shape[0]:
		deltaD = numpy.append(deltaD, numpy.max(DqGenetic[i][IndexZero:-1])-numpy.min(DqGenetic[i][IndexZero:-1]))
	if i < DqSimulated.shape[0]:
		deltaE = numpy.append(deltaE, numpy.max(DqSimulated[i][IndexZero:-1])-numpy.min(DqSimulated[i][IndexZero:-1]))
plt.plot(range(0,10*deltaA.shape[0],10),deltaA,'r-' , label = r'$\Delta D_q$ ataque aleatorio')
plt.plot(range(0,10*deltaB.shape[0],10),deltaB,'g-' , label = r'$\Delta D_q$ ataque por grado')
plt.plot(range(0,10*deltaC.shape[0],10),deltaC,'b-' , label = r'$\Delta D_q$ ataque centralidad')
plt.plot(range(0,10*deltaD.shape[0],10),deltaD,'y-' , label = r'$\Delta D_q$ ataque genetico')
plt.plot(range(0,10*deltaE.shape[0],10),deltaE,'k-' , label = r'$\Delta D_q$ ataque simulado')
fontP = FontProperties()
fontP.set_size('small')
plt.xlabel('% Nodos perdidos', fontdict=font)
plt.ylabel(r'Diferencia maximo y minimo $\Delta D_q$', fontdict=font)
plt.title(u'Multifractalidad y robustez', fontdict=font)
lgd = plt.legend(loc='upper left', prop={'size':8}, bbox_to_anchor=(1,1))
plt.grid(True)
plt.savefig('multirobus'+fileOutput+'.png', bbox_extra_artists=(lgd,),bbox_inches='tight')
file = open('50'+fileOutput+'resultados.txt', 'w')
file.write('GC Grado, '+str(numpy.sum(GCDegree))+'\n')
file.write('GC Aleatorio, '+str(numpy.sum(GCRandom))+'\n')
file.write('GC Centralidad, '+str(numpy.sum(GCCentrality))+'\n')
file.write('GC Genetico, '+str(numpy.sum(GCGenetic))+'\n')
file.write('GC Simulado, '+str(numpy.sum(GCSimulated))+'\n')
file.write('APL Grado, '+str(numpy.sum(APLDegree))+'\n')
file.write('APL Aleatorio, '+str(numpy.sum(APLRandom))+'\n')
file.write('APL Centralidad, '+str(numpy.sum(APLCentrality))+'\n')
file.write('APL Genetico, '+str(numpy.sum(APLGenetic))+'\n')
file.write('APL Simulado, '+str(numpy.sum(APLSimulated))+'\n')
file.close()
