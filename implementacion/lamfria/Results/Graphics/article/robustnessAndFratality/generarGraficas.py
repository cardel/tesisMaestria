#!/usr/bin/python
# -*- coding: utf-8 -*- 
import numpy
numpy.set_printoptions(threshold=numpy.nan)
import matplotlib.pyplot as plt
import time
import math
from matplotlib.font_manager import FontProperties
minq = -10
maxq = 10
IndexZero = 10
symbols = ['r-p','b-s','g-^','y-o','m->','c-<','g--','k-.','c--']
nan=float('nan')
percentNodes=[ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]


DqRandom=numpy.array([[ 2.89650195, 2.92042308, 2.94883968, 2.98276671, 3.02396769, 3.07568082,
   3.14242127, 3.22959651, 3.34542923, 3.48449957, 3.54135258, 3.3851822 ,
   3.06671357, 2.71088902, 2.40028729, 2.19662155, 2.05936606, 1.9610486 ,
   1.8874544 , 1.83040757, 1.78491861],
 [ 3.15175701, 3.16786176, 3.186378  , 3.20803383, 3.2342633 , 3.26711948,
   3.30845817, 3.36034131, 3.42503111, 3.48518066, 3.45667669, 3.27370622,
   2.9538406 , 2.60294887, 2.30214676, 2.10746906, 1.97678206, 1.88297681,
   1.81256837, 1.75792676, 1.71435298],
 [ 3.31285512, 3.31500958, 3.31713124, 3.31927279, 3.32134484, 3.32277457,
   3.32241546, 3.31824571, 3.30318168, 3.25576799, 3.13505561, 2.90478544,
   2.58478108, 2.25848517, 1.98863724, 1.81591704, 1.70019801, 1.61703683,
   1.55446571, 1.50577933, 1.46684201],
 [ 2.74096137, 2.76646023, 2.79678338, 2.83328132, 2.87789816, 2.93321091,
   3.00167905, 3.0849906 , 3.18098755, 3.27072954, 3.30286714, 3.17887843,
   2.89402649, 2.55148523, 2.2526421 , 2.0605508 , 1.93363081, 1.84394708,
   1.77746147, 1.72643767, 1.68612745],
 [ 3.01067625, 3.01846507, 3.02714728, 3.03691814, 3.04801849, 3.06065037,
   3.07483638, 3.09024616, 3.10520178, 3.11120752, 3.0652216 , 2.88646815,
   2.58722802, 2.21990154, 1.91448784, 1.72924532, 1.6096407 , 1.5254567 ,
   1.46246716, 1.41355066, 1.37457412],
 [ 2.62869449, 2.64943604, 2.67365479, 2.70190909, 2.7348805 , 2.77368821,
   2.8201459 , 2.87543151, 2.93487959, 2.97956945, 2.96387271, 2.81766428,
   2.55328728, 2.20107017, 1.90990922, 1.73086893, 1.61565693, 1.53574986,
   1.47673175, 1.43116724, 1.39493718],
 [ 2.31064927, 2.30860553, 2.30558894, 2.30119978, 2.29482898, 2.28550842,
   2.27165322, 2.25065822, 2.21818076, 2.16690619, 2.0877407 , 1.97573831,
   1.83163068, 1.64920101, 1.47614292, 1.35392931, 1.26989525, 1.20929737,
   1.16358645, 1.12789677, 1.09927667],
 [ 2.04322476, 2.04652213, 2.04948539, 2.05176876, 2.05282622, 2.05180209,
   2.0473469 , 2.03728952, 2.01805287, 1.98394505, 1.9281493 , 1.8471252 ,
   1.73684077, 1.59301163, 1.45456631, 1.35126077, 1.27786084, 1.22430859,
   1.18377443, 1.15210924, 1.12674903],
 [ 2.57300639, 2.57181078, 2.57034948, 2.56852286, 2.5661744 , 2.56304348,
   2.55866277, 2.55211103, 2.54134597, 2.5212021 , 2.47709816, 2.36954896,
   2.14772794, 1.89181512, 1.71780582, 1.61490716, 1.55088476, 1.50788191,
   1.47711959, 1.45404114, 1.43609024],
 [ 1.55890526, 1.55629994, 1.55311654, 1.54914028, 1.54403821, 1.53727134,
   1.52792679, 1.51439217, 1.49374242, 1.4607573 , 1.40730316, 1.32608529,
   1.22384936, 1.12571757, 1.05036948, 0.99817808, 0.96249831, 0.93744668,
   0.91918594, 0.9053829 , 0.8946153 ]]
)
GCRandom=numpy.array([  1.00000000e+00,  6.62375000e-01,  4.02500000e-01,  2.66875000e-01,
   1.51500000e-01,  8.60000000e-02,  2.43750000e-02,  1.35000000e-02,
   1.50000000e-03,  7.50000000e-04]
)
APLRandom=numpy.array([ 1.        , 0.91471452, 0.85947963, 0.80182347, 0.71839389, 0.66473375,
  0.62635706, 0.60544797, 0.1462525 , 0.04833694]

)
DqDegree=numpy.array([[ 3.21534337, 3.22691373, 3.24045532, 3.25632614, 3.27522832, 3.29863878,
   3.3284589 , 3.36624477, 3.41382015, 3.46020687, 3.42366382, 3.21697098,
   2.88660987, 2.54341571, 2.25440973, 2.06441101, 1.93601587, 1.843889  ,
   1.77480796, 1.72116615, 1.6783197 ],
 [ 0.81066566, 0.80959218, 0.80802379, 0.80580692, 0.80275437, 0.79864982,
   0.79326371, 0.78638667, 0.77788298, 0.7677578 , 0.75621785, 0.74369738,
   0.7308225 , 0.71830041, 0.70675419, 0.69657812, 0.68789763, 0.68063639,
   0.67461763, 0.66964027, 0.66551766],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan]]
)
GCDegree=numpy.array([  1.00000000e+00,  1.25000000e-03,  2.50000000e-04,  1.25000000e-04,
   1.25000000e-04,  1.25000000e-04,  1.25000000e-04,  1.25000000e-04,
   1.25000000e-04,  1.25000000e-04]
)
APLDegree=numpy.array([ 1.        , 0.15021329, 0.04508918, 0.09040508, 0.09040508, 0.09040508,
  0.09040508, 0.09040508, 0.09040508, 0.09040508]

)
DqCentrality=numpy.array([[ 2.89679636, 2.92079811, 2.94928878, 2.98328473, 3.02455151, 3.07629896,
   3.14296364, 3.2298607 , 3.34498934, 3.48301384, 3.54038893, 3.38496968,
   3.06595785, 2.7064395 , 2.39146075, 2.18578686, 2.04740036, 1.94829474,
   1.87412814, 1.81667036, 1.77089595],
 [ 2.43562783, 2.45434242, 2.47598662, 2.50106463, 2.53039897, 2.56550878,
   2.60879966, 2.66287363, 2.72918651, 2.80383402, 2.85311001, 2.80874221,
   2.64378931, 2.37773391, 2.10694555, 1.91997187, 1.79366245, 1.70429402,
   1.63824391, 1.58760087, 1.54760421],
 [ 1.95039572, 1.961302  , 1.9736601 , 1.98775666, 2.00398005, 2.02282763,
   2.04473652, 2.06936106, 2.09381586, 2.11018497, 2.10439719, 2.05961276,
   1.96098564, 1.8077775 , 1.64957562, 1.52692535, 1.4386423 , 1.37452834,
   1.32669507, 1.28999435, 1.26111572],
 [ 1.34472611, 1.34271493, 1.33990155, 1.3359813 , 1.33053704, 1.32300116,
   1.31261167, 1.29837481, 1.27906036, 1.25325436, 1.21946181, 1.1764043 ,
   1.1243395 , 1.06747717, 1.01316588, 0.96673048, 0.92933149, 0.89978723,
   0.87639677, 0.85766869, 0.84245945],
 [ 0.89707458, 0.89521102, 0.89286329, 0.88987532, 0.88603252, 0.88104001,
   0.87449681, 0.86587326, 0.85451411, 0.83971995, 0.82099203, 0.79848009,
   0.77340968, 0.74793923, 0.7242511 , 0.70365363, 0.68644913, 0.67233271,
   0.66078901, 0.65130521, 0.64344705],
 [ 0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713,
   0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713,
   0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713, 0.35682713,
   0.35682713, 0.35682713, 0.35682713],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan]]
)
GCCentrality=numpy.array([  1.00000000e+00,  6.97500000e-02,  1.18750000e-02,  3.50000000e-03,
   1.37500000e-03,  3.75000000e-04,  2.50000000e-04,  1.25000000e-04,
   1.25000000e-04,  1.25000000e-04]
)
APLCentrality=numpy.array([ 1.        , 0.69732732, 0.45178261, 0.347089  , 0.19341239, 0.07198726,
  0.09120178, 0.09120178, 0.09120178, 0.09120178]

)
DqGenetic=numpy.array([[ 3.07892875, 3.0963682 , 3.11687611, 3.14111837, 3.17028786, 3.2066684 ,
   3.25333922, 3.31357577, 3.39211861, 3.48053365, 3.48595243, 3.30138822,
   2.97501001, 2.62144051, 2.3161858 , 2.11675092, 1.98237807, 1.88603288,
   1.81383819, 1.75783085, 1.71314786],
 [ 3.05063937, 3.06419295, 3.07992512, 3.09882524, 3.12220773, 3.15130483,
   3.18779515, 3.23617276, 3.30053224, 3.36711148, 3.32051239, 3.10851316,
   2.78539469, 2.45232882, 2.17380694, 1.99076597, 1.8669827 , 1.77801756,
   1.7112082 , 1.65927803, 1.61775999],
 [ 2.89083546, 2.91432923, 2.94254317, 2.97676358, 3.01825223, 3.06844215,
   3.13042555, 3.20792838, 3.29952484, 3.38305554, 3.39047395, 3.23953399,
   2.93416127, 2.57691038, 2.26545539, 2.06711428, 1.93455366, 1.83939579,
   1.76796531, 1.71261868, 1.66862399],
 [ 2.48493898, 2.51095884, 2.54213768, 2.58003961, 2.62711519, 2.68721643,
   2.7653359 , 2.86597569, 2.99588524, 3.15091933, 3.26685365, 3.1783489 ,
   2.87457429, 2.51143267, 2.21325703, 2.02733069, 1.90338142, 1.81449269,
   1.74768443, 1.69585797, 1.6545951 ],
 [ 2.90099416, 2.90946907, 2.91879152, 2.92931079, 2.94176955, 2.95716157,
   2.9759202 , 2.9969823 , 3.01831276, 3.02110538, 2.95460838, 2.7488769 ,
   2.43449097, 2.11306717, 1.86189668, 1.70384801, 1.59732626, 1.52032652,
   1.46210534, 1.41671925, 1.38042662],
 [ 2.91373295, 2.92105681, 2.92909581, 2.9379786 , 2.94798773, 2.9596053 ,
   2.9733582 , 2.98927193, 3.00686017, 3.02780336, 3.02625808, 2.8748449 ,
   2.581728  , 2.22266428, 1.94094287, 1.76811749, 1.65299064, 1.57035744,
   1.50804   , 1.45955309, 1.42091711],
 [ 2.87054321, 2.87849846, 2.88759633, 2.89815349, 2.91042606, 2.92435851,
   2.93950898, 2.95614626, 2.97763884, 3.00715819, 2.9969292 , 2.84006165,
   2.56571023, 2.21896282, 1.9485956 , 1.77883811, 1.66518862, 1.58403947,
   1.52311327, 1.47577007, 1.43805783],
 [ 2.71308736, 2.71420918, 2.71517917, 2.71575931, 2.71553382, 2.71387578,
   2.70997397, 2.70290269, 2.69151186, 2.67129957, 2.60367272, 2.40810207,
   2.15913055, 1.84236548, 1.61228284, 1.47002862, 1.37488661, 1.30717301,
   1.25647789, 1.21697215, 1.18525895],
 [ 0.94649148, 0.94447335, 0.94208072, 0.93921442, 0.93573066, 0.93140426,
   0.9258552 , 0.91841245, 0.90789627, 0.89235792, 0.86899731, 0.83504051,
   0.79099478, 0.74381181, 0.70201702, 0.66886742, 0.64342303, 0.62376885,
   0.60830754, 0.59591299, 0.58581259],
 [ 1.27738534, 1.27293551, 1.26750424, 1.26073599, 1.25209342, 1.24074303,
   1.22536851, 1.20389545, 1.17321279, 1.12938867, 1.06978724, 0.99805571,
   0.92632418, 0.86672275, 0.82289863, 0.79221598, 0.77074292, 0.75536839,
   0.744018  , 0.73537544, 0.72860718]]
)
GCGenetic=numpy.array([  1.00000000e+00,  6.85625000e-01,  4.30750000e-01,  1.86625000e-01,
   1.37125000e-01,  7.80000000e-02,  5.30000000e-02,  2.71250000e-02,
   1.00000000e-03,  6.25000000e-04]
)
APLGenetic=numpy.array([ 1.        , 0.94393806, 0.8723279 , 0.68780557, 0.65326066, 0.54067102,
  0.4875003 , 0.42065576, 0.11313968, 0.06408549]

)
DqSimulated=numpy.array([[ 3.308055  , 3.31502061, 3.32307807, 3.33234182, 3.34312584, 3.356243  ,
   3.37260096, 3.39234769, 3.41495458, 3.42756494, 3.35743575, 3.13356902,
   2.80113191, 2.45771686, 2.16679846, 1.97726581, 1.84937019, 1.75743206,
   1.68835758, 1.63464593, 1.5917129 ],
 [ 2.0833754 , 2.0795772 , 2.07481504, 2.06876435, 2.06095075, 2.05063723,
   2.03659107, 2.01663686, 1.98703758, 1.94245022, 1.87842066, 1.79555498,
   1.69374031, 1.57124989, 1.44816135, 1.34810228, 1.27347559, 1.21794281,
   1.17562833, 1.14250699, 1.11594821],
 [ 1.97366778, 1.97507387, 1.97671024, 1.97863719, 1.98087234, 1.98328567,
   1.98538954, 1.98603237, 1.98302312, 1.97079907, 1.93424986, 1.86315608,
   1.75918044, 1.62542849, 1.48932053, 1.37994861, 1.29966666, 1.24075087,
   1.19636139, 1.16192872, 1.13452042],
 [ 1.59313053, 1.59439926, 1.59560593, 1.59667064, 1.59748195, 1.597852  ,
   1.59735107, 1.59483159, 1.58745661, 1.56964496, 1.5334281 , 1.47137369,
   1.37970777, 1.26634027, 1.16107161, 1.08076209, 1.02203651, 0.97842717,
   0.94517035, 0.91913762, 0.89828451],
 [ 1.48254117, 1.48936721, 1.4971277 , 1.50597201, 1.51612578, 1.52795244,
   1.54192511, 1.55807941, 1.57399646, 1.58154318, 1.56772855, 1.52261658,
   1.44433831, 1.34285489, 1.24577223, 1.16954348, 1.11256474, 1.06961693,
   1.03654686, 1.01050367, 0.98956656],
 [ 1.42069901, 1.42048275, 1.4202326 , 1.41997745, 1.41976486, 1.41964096,
   1.41953056, 1.41878561, 1.41495399, 1.40186301, 1.36987428, 1.31043218,
   1.21486976, 1.09522093, 0.9943687 , 0.92336154, 0.87321538, 0.83631812,
   0.80812961, 0.78593001, 0.76801569],
 [ 1.27024888, 1.26847814, 1.26624524, 1.26344397, 1.25994066, 1.25555766,
   1.25002737, 1.24285772, 1.23295659, 1.21775018, 1.19191167, 1.1481035 ,
   1.08508312, 1.0168335 , 0.95944919, 0.9166148 , 0.88517759, 0.86158117,
   0.84335613, 0.82893249, 0.81729807],
 [ 1.195528  , 1.19854076, 1.2021046 , 1.20640658, 1.21170262, 1.2183134 ,
   1.22654909, 1.2364273 , 1.24691453, 1.25444864, 1.25159345, 1.22977808,
   1.18949998, 1.14449041, 1.1069225 , 1.07908852, 1.05881546, 1.04376325,
   1.03232402, 1.02347317, 1.01654136],
 [ 0.96093662, 0.95706055, 0.95235672, 0.94655232, 0.9392611 , 0.92993636,
   0.91781789, 0.90190226, 0.88102258, 0.85421454, 0.82153388, 0.785     ,
   0.74846612, 0.71578546, 0.68897742, 0.66809774, 0.65218211, 0.64006364,
   0.6307389 , 0.62344768, 0.61764328],
 [        nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan,        nan,        nan,        nan,
          nan,        nan,        nan]]
)
GCSimulated=numpy.array([  1.00000000e+00,  1.51250000e-02,  1.16250000e-02,  5.12500000e-03,
   4.62500000e-03,  2.50000000e-03,  1.12500000e-03,  8.75000000e-04,
   5.00000000e-04,  3.75000000e-04]
)
APLSimulated=numpy.array([ 1.        , 0.49785116, 0.43520759, 0.30528978, 0.27303507, 0.17129766,
  0.14043757, 0.09737528, 0.03972971, 0.09113942]
  
)
fileOutput = '20180512_143117ScaleFree8000Nodes'
timestr = 'grafica'
fig3 = plt.figure()
ax = fig3.add_subplot(111)
delta = numpy.array([])
for i in range(0,9):
	if i < DqRandom.shape[0]:
		delta = numpy.append(delta, numpy.max(DqRandom[i][IndexZero:-1])-numpy.min(DqRandom[i][IndexZero:-1]))
plt.plot(range(0,10*delta.shape[0],10),delta, label = r'$\Delta D_q$')
plt.plot(range(0,10*GCRandom.shape[0],10), GCRandom,'r-' ,label='Medida GC')
plt.plot(range(0,10*APLRandom.shape[0],10), APLRandom,'g-' ,label='Medida APL')
fontP = FontProperties()
fontP.set_size('small')
plt.xlabel('% Nodos perdidos')
plt.title(u'Dimensión fractal ataque Aleatorio')
plt.text(0.7, 0.95, 'Indice R GC='+str(numpy.around(numpy.sum(GCRandom), decimals=3)), size=10, ha='left', va='top', transform=ax.transAxes)
plt.text(0.7, 0.9, 'Indice R APL='+str(numpy.around(numpy.sum(APLRandom), decimals=3)), size=10, ha='left', va='top', transform=ax.transAxes)
lgd = plt.legend(loc='upper left', prop={'size':10}, bbox_to_anchor=(1,1))
plt.grid(True)
plt.savefig(timestr+'_'+'DqRandom'+fileOutput+'.png', bbox_extra_artists=(lgd,),bbox_inches='tight')
